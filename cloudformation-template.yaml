AWSTemplateFormatVersion: '2010-09-09'
Description: 'Your6: AI-Powered Veteran Support Mobilization System'

Resources:
  # DynamoDB Table
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: your6-users
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH

  # S3 Bucket for Check-ins
  CheckinsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'your6-checkins-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # SNS Topic for Alerts
  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: Your6-TrustedContactAlerts
      DisplayName: Your6 Alerts

  # IAM Role for Lambda Functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: Your6LambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                Resource: !GetAtt UsersTable.Arn
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub '${CheckinsBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - comprehend:DetectSentiment
                  - comprehend:DetectKeyPhrases
                  - bedrock:InvokeModel
                  - transcribe:StartTranscriptionJob
                  - transcribe:GetTranscriptionJob
                  - events:PutEvents
                  - sns:Publish
                Resource: '*'

  # Lambda Function for Check-ins
  CheckinFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: Your6-CheckinProcessor
      Runtime: python3.11
      Handler: handler.lambda_handler
      Code:
        S3Bucket: your6-deployment-bucket-205930636302
        S3Key: lambda-package.zip
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref UsersTable
          S3_BUCKET: !Ref CheckinsBucket
          SNS_TOPIC_ARN: !Ref AlertTopic

  # Lambda Function for Alerts
  AlertDispatcherFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: Your6-AlertDispatcher
      Runtime: python3.11
      Handler: alert_dispatcher.lambda_handler
      Code:
        S3Bucket: your6-deployment-bucket-205930636302
        S3Key: lambda-package.zip
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref UsersTable
          S3_BUCKET: !Ref CheckinsBucket
          SNS_TOPIC_ARN: !Ref AlertTopic

  # API Gateway
  Your6Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Your6-API
      Description: API for Your6 veteran check-ins

  CheckinResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Your6Api
      ParentId: !GetAtt Your6Api.RootResourceId
      PathPart: check-in

  CheckinMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref Your6Api
      ResourceId: !Ref CheckinResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CheckinFunction.Arn}/invocations'

  # Lambda Permissions for API Gateway
  CheckinFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CheckinFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Your6Api}/*/*'

  # API Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - CheckinMethod
    Properties:
      RestApiId: !Ref Your6Api
      StageName: prod

  # EventBridge Rule
  LowSentimentRule:
    Type: AWS::Events::Rule
    Properties:
      Name: Your6-LowSentimentRule
      EventPattern:
        source:
          - your6.checkin
        detail-type:
          - Low Sentiment Alert
      State: ENABLED
      Targets:
        - Arn: !GetAtt AlertDispatcherFunction.Arn
          Id: AlertDispatcherTarget

  # Permission for EventBridge
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AlertDispatcherFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LowSentimentRule.Arn

Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${Your6Api}.execute-api.${AWS::Region}.amazonaws.com/prod/check-in'
  
  UsersTableName:
    Description: DynamoDB table name
    Value: !Ref UsersTable
  
  CheckinsBucketName:
    Description: S3 bucket for check-ins
    Value: !Ref CheckinsBucket